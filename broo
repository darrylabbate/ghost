#!/bin/bash +e
#
# Author: Darryl Abbate
# https://github.com/rootbeersoup/ghost
#
# All-in-one Homebrew maintenance script
# - Installs Homebrew if missing
# - Installs packages from global Brewfile (~/.Brewfile)
# - Updates formulae
# - Upgrades existing packages
# - Cleans up formulae

# shellcheck disable=SC2059

GHOST_VERSION="0.1.3.1"

BUNDLELOG=$(mktemp /tmp/ghost.bundle.check.XXXXXXXX)
INSTALLLOG=$(mktemp /tmp/ghost.bundle.install.XXXXXXXX)
OUTDATEDLOG=$(mktemp /tmp/ghost.outdated.XXXXXXXX)
UPDATELOG=$(mktemp /tmp/ghost.update.XXXXXXXX)
UPGRADELOG=$(mktemp /tmp/ghost.upgrade.XXXXXXXX)

CHECKMARK="\\033[32m‚úì\\033[0m"
CLEARLINE="\\033[2K"
ERRORMSG="\\033[31mERROR:\\033[0m"
SPINDELAY="0.05"
SPINSTR="‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"

print_info()
{
  printf "ghost v%s\\n" "${GHOST_VERSION}"
}

# Spinner function
# Supply only one string as an argument to overlay succeeding spinner message on top
# Else supply a second string to display beside a checkmark when process completes
spinner() 
{
  local PROCESS
  local POSTMSG
  PROCESS=$1
  POSTMSG=$2

  while true; do
    if jobs %1 &> /dev/null; then
      true
    else
      if [[ "$POSTMSG" ]]; then
        printf "${CLEARLINE}${CHECKMARK} ${POSTMSG}\\n"
      fi
      break
    fi
    for (( i=0; i<${#SPINSTR}; i++ )); do
      sleep "$SPINDELAY"
      printf "${CLEARLINE}${SPINSTR:$i:1} ${PROCESS}\\r"
    done
  done
}

# trap function for 0 exit codes
finish()
{
  tput cnorm
  exit 0
}

# trap function for user interrupts
interrupt()
{
  printf "\\n\\033[31m‚úó\\033[0m User interrupt; terminating...\\n"
  tput cnorm
  exit 2
}

print_install_log()
{
  awk 'tolower($0) ~ /installing/{print "\033[34m|\033[0m " $2}' "$INSTALLLOG"
}

print_upgrade_log()
{
  awk 'FNR == 2 {gsub(", ", "\n"); print}' "$UPGRADELOG" | column -t | awk '{print "\033[34m|\033[0m "$0}'
}

# Brew Bundle
brew_bundle()
{
  # Skip brew bundle if no Brewfile found
  if ! [[ -f "$HOME/.Brewfile" ]]; then
    printf "${ERRORMSG} Global Brewfile not found (~/.Brewfile).\\n       Skipping \`brew bundle\`...\\n"
  else
    # Run `brew bundle check` since it's quicker than `brew bundle`
    # For whatever reason, `bundle check` always returns "missing dependencies" unless using the `--verbose` flag
    (brew bundle check --global --verbose > "$BUNDLELOG") &
    spinner "Check Brewfile for missing packages" 

    # Run `brew bundle` if `check` returns missing dependencies
    if [[ $(grep missing "$BUNDLELOG" &> /dev/null; echo $?) -eq 0 ]]; then
      (brew bundle --global > "$INSTALLLOG") &
      spinner "Install missing packages" "New packages installed"
      print_install_log
      rm "$INSTALLLOG"
    fi
    rm "$BUNDLELOG"
  fi
}

brew_update()
{
  (brew update > "$UPDATELOG") &
  spinner "Update Homebrew formulae"

  if [[ $(wc -l "$UPDATELOG" | awk '{print $1}') -ge "2" ]]; then
    printf "${CLEARLINE}${CHECKMARK} Formulae updated\\n"
  fi
  rm "$UPDATELOG"
}

brew_upgrade()
{
  (brew outdated > "$OUTDATEDLOG") &
  spinner "Check for available upgrades"

  if [[ -s "$OUTDATEDLOG" ]]; then
    (brew upgrade --display-times > "$UPGRADELOG") &
    spinner "Upgrade existing Homebrew packages" "Packages upgraded"
    print_upgrade_log
    rm "$OUTDATEDLOG"
    rm "$UPGRADELOG"
  fi
}
    
main()
{
  trap finish    0 # Clean up upon 0 exit status
  trap interrupt 2 # Clean up upon user interrupt (CTRL+C)

  # Exit quickly if run on something other than macOS
  if ! [[ "$(uname -s)" == "Darwin" ]]; then
    printf "${ERRORMSG} macOS required to use Homebrew\\n"
    exit 1
  fi

  # Install Homebrew if not already installed
  if ! [[ -x "$(command -v brew)" ]]; then 
    printf "Homebrew not found on this system; Installing...\\n"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  tput civis

  brew_update
  brew_upgrade
  brew_bundle

  # Cleanup
  (brew cleanup &> /dev/null) &
  spinner "Clean up"

  # Done
  printf "${CLEARLINE}${CHECKMARK} Homebrew up-to-date üç∫\\n"

  find /tmp/ -maxdepth 1 -empty -name "ghost.*" -delete
}

if [[ "$1" ]]; then
  print_info
else
  main
fi
